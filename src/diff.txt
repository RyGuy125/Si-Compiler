2,5d1
< 
< #include "errormsg.h"
< #include "tokens.h"
< #include "util.h"
6a3,5
> #include "util.h"
> #include "tokens.h"
> #include "errormsg.h"
21c20
<  
---
> 
24,26c23,24
< %x M_COMMENT		
< %x S_COMMENT 		
< %x ERROR_HANDLE     
---
> %x C_COMMENT
> %x ERROR_HANDLE
31,33c29
< "/*" {adjust(); BEGIN M_COMMENT;}
< "!"  {adjust(); BEGIN S_COMMENT;}
< "?"  {adjust(); BEGIN S_COMMENT;}
---
> "/*" {adjust(); BEGIN C_COMMENT;}
48c44
< "==" {adjust(); return EQ;}
---
> "="  {adjust(); return EQ;}
54,56c50,51
< "&"  {adjust(); return Y;}
< "|"  {adjust(); return O;}
< "="  {adjust(); return ASSIGN;}
---
> "&"  {adjust(); return AND;}
> "|"  {adjust(); return OR;}
58,94c53,69
< por  	    {adjust(); return POR;}
< para	    {adjust(); return PARA;}
< es		    {adjust(); return ES;}
< esta 	    {adjust(); return ESTA;}
< estara    {adjust(); return ESTARA;}
< sera	    {adjust(); return SERA;}
< sea	      {adjust(); return SEA;}
< este	    {adjust(); return ESTE;}
< cambiar   {adjust(); return CAMBIAR;}
< pausa     {adjust(); return PAUSA;}
< si        {adjust(); return SI;}
< mas       {adjust(); return MAS;}
< dejar     {adjust(); return DEJAR;}
< en        {adjust(); return EN;}
< terminar  {adjust(); return TERMINAR;}
< nil       {adjust(); return NIL;}
< ent       {adjust(); return TIPO;}
< cadena    {adjust(); return TIPO;}
< doble     {adjust(); return TIPO;}
< car 	    {adjust(); return CAR;}
< vacuo     {adjust(); return VACUO;}
< flota	    {adjust(); return FLOTA;}
< pocx      {adjust(); return POCX;}
< largx	    {adjust(); return LARGX;}
< externx   {adjust(); return EXTERNX;}
< constante {adjust(); return CONSTANTE;}
< inmutable {adjust(); return INMUTABLE;}
< sal 	    {adjust(); return SAL;}
< union	    {adjust(); return UNION;}
< y         {adjust(); return Y;}
< o         {adjust(); return O;}
< redefine  {adjust(); return REDEFINE;}
< crea      {adjust(); return CREA;}
< entre     {adjust(); return ENTRE;}
< lista	    {adjust(); return LISTA;}
< mapa      {adjust(); return MAPA;}
< di		    {adjust(); return DI;}
---
> for  	 {adjust(); return FOR;}
> while    {adjust(); return WHILE;}
> to       {adjust(); return TO;}
> do       {adjust(); return DO;}
> break    {adjust(); return BREAK;}
> array    {adjust(); return ARRAY;}
> if       {adjust(); return IF;}
> then     {adjust(); return THEN;}
> else     {adjust(); return ELSE;}
> let      {adjust(); return LET;}
> in       {adjust(); return IN;}
> end      {adjust(); return END;}
> of       {adjust(); return OF;}
> nil      {adjust(); return NIL;}
> function {adjust(); return FUNCTION;}
> var      {adjust(); return VAR;}
> type     {adjust(); return TYPE;}
96,97c71,72
< \"([^"\\]|\\.)*\"     {adjust(); yylval.sval=yytext; return CADENA;}
< [0-9]+	  			  {adjust(); yylval.ival=atoi(yytext); return ENT;}
---
> \"([^"\\]|\\.)*\"  {adjust(); yylval.sval=yytext; return STRING;}
> [0-9]+	  {adjust(); yylval.ival=atoi(yytext); return INT;}
99,105c74,78
< <M_COMMENT>[^*]     {adjust(); }
< <M_COMMENT>"*"/[^/] {adjust(); }
< <M_COMMENT>"*/"     {adjust(); BEGIN INITIAL;}
< <M_COMMENT>.   		{adjust(); }
< <S_COMMENT>\n		{adjust(); BEGIN INITIAL;}
< <S_COMMENT>.		{adjust(); }
< <ERROR_HANDLE>[ \t] { adjust(); 
---
> <C_COMMENT>[^*]     {adjust(); }
> <C_COMMENT>"*"/[^/] {adjust(); }
> <C_COMMENT>"*/"     {adjust(); BEGIN INITIAL;}
> <C_COMMENT>.    {adjust(); }
> <ERROR_HANDLE>[ \t] {adjust(); 
107c80
<                         fprintf(stderr,"unrecognized token %s",yytext);
---
>                         EM_error(EM_tokPos,"unrecognized token %s", yytext);
110c83
< <ERROR_HANDLE>\n { adjust();
---
> <ERROR_HANDLE>\n {adjust();
113c86
<                     fprintf(stderr,"unrecognized token %s",yytext);
---
>                     EM_error(EM_tokPos,"unrecognized token %s",yytext);
117c90
<                         fprintf(stderr,"unrecognized token before EOF");
---
>                         EM_error(EM_tokPos,"unrecognized token before EOF");
120c93,94
< <ERROR_HANDLE>.  { adjust(); yymore();}
\ No newline at end of file
---
> <ERROR_HANDLE>.  {adjust(); yymore();}
> 
